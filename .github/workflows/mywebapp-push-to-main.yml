name: MyWebApp - Push To Main Workflow

# triggering on both a push to main, as well as manually
on:
  workflow_dispatch:
  push:
    branches: 
      - main

permissions:
  id-token: write
  
jobs:

  # Build App
  build-app:

    name: "Build The App"

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    # .NET 6 is already installed on hosted runners by default. If 
    # it was missing, you can use the step below to install it
    #- name: Setup .NET Core 6
    #  uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: 6.0.x
    
    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/src/mywebapp.sln"
    
    - name: Build
      run: dotnet build "${{ github.workspace }}/src/mywebapp.sln" --configuration Release --no-restore
    
    - name: Test
      run: |
        dotnet test "${{ github.workspace }}/src/mywebapp.sln" --no-restore --logger:"junit;LogFilePath=${{ github.workspace }}/results/test-results.xml"

    # create a test summary markdown file 
    # if you don't specify an output file, it will automatically add 
    # as a job summary. If you specify an output file, you have to 
    # create your own step of adding it to the job summary. I am 
    # intentionally doing that to show job summaries
    - name: Create test summary
      uses: test-summary/action@v1
      with:
        paths: ${{ github.workspace }}/results/*.xml
        output: ${{ github.workspace }}/results/summary.md
      if: always()

    # I am adding the test results to the Job Summary
    - name: Add Test Results To Job Summary
      run: |
        echo "TEST RESULTS:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
        cat "${{ github.workspace }}/results/summary.md" >> $GITHUB_STEP_SUMMARY
      if: always()

    # I am publishing the artifacts, and also adding to job summary
    - name: Publish Artifacts To Workflow
      run: |
        dotnet publish "${{ github.workspace }}/src/mywebapp/mywebapp.csproj" -c Release -o mywebapp-files
        echo "I've created my artifacts to upload" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.0
      with:
        # Artifact name
        name: mywebappbuildartifacts
        # A file, directory or wildcard pattern that describes what to upload
        path: mywebapp-files/**
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
        # Duration after which artifact will expire in days. 0 means using default retention.
        retention-days: 90

  deploy-to-dev:
    
    name: "Deploy To Azure DEV env"

    runs-on: ubuntu-latest
    
    needs:
      - build-app
    
    environment:
      name: 'DEV'
      url: 'https://github-actions-talk-dev.azurewebsites.net'

    steps:
    - uses: actions/checkout@v2
      
    - name: 'Login via Azure OIDC'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v2.0.8
      with:
        # Artifact name
        name: 'mywebappbuildartifacts'
        # Destination path
        path: 'mywebappbuildartifacts'
   
    # Deploy to Azure Web apps
    - name: 'Deploy to DEV Azure webapp using OIDC'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: github-actions-talk-dev # Replace with your app name
        package: 'mywebappbuildartifacts' 

  deploy-to-staging:
    
    name: "Deploy To Azure STAGING env"

    runs-on: ubuntu-latest
    
    needs:
      - build-app
    
    environment:
      name: 'STAGING'
      url: 'https://github-actions-talk-staging.azurewebsites.net'

    steps:
    - uses: actions/checkout@v2
      
    - name: 'Login via Azure OIDC'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v2.0.8
      with:
        # Artifact name
        name: 'mywebappbuildartifacts'
        # Destination path
        path: 'mywebappbuildartifacts'
   
    # Deploy to Azure Web apps
    - name: 'Deploy to STAGING Azure webapp using OIDC'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: github-actions-talk-staging # Replace with your app name
        package: 'mywebappbuildartifacts'

  deploy-to-prod:
    
    name: "Deploy To Azure PROD env"

    runs-on: ubuntu-latest
    
    needs:
      - deploy-to-dev
      - deploy-to-staging
    
    environment:
      name: 'PROD'
      url: 'https://github-actions-talk-prod.azurewebsites.net'

    steps:
    - uses: actions/checkout@v2
      
    - name: 'Login via Azure OIDC'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v2.0.8
      with:
        # Artifact name
        name: 'mywebappbuildartifacts'
        # Destination path
        path: 'mywebappbuildartifacts'
   
    # Deploy to Azure Web apps
    - name: 'Deploy to prod Azure webapp using OIDC'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: github-actions-talk-prod # Replace with your app name
        package: 'mywebappbuildartifacts'
